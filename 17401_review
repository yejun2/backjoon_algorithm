처음 문제의 접근은 선형대수식 접근이 아니었다.
시간복잡도를 보자.
처음 접근법에서 O(N**3*2T) 가 된다. 이는 32,000,000 정도로 1초이내이므로 시간복잡도에서 문제는 없었다.
각 주기 별로 행렬의 계산을 진행한 후, 같은 출발지에서 같은 경로를 거치니 D/T만큼 규칙을 찾아 연산하고 나머지는 추가적으로 연산하면 되겠다는 생각으로 접근하였다.
하지만, 출발지에서 같은 경로를 밟더라도 출발지가 계속 바뀌어 규칙을 찾지 못했고, 서치를 통해 선형대수적으로 접근하였다.

D/T만큼 모든 주기의 행렬의 곱셈의 제곱을 통해 값을 구하고, 나머지 만큼 주기와 곱을 해주면 된다.
이 알고리즘의 시간복잡도를 구해보자
O(N**3 * 2T + log(D) * N**3) = 1,600 * 200 + 22 * 1,600 으로 1억미만으로 1초의 시간제한에 충족한다.

계산을 편하게 하기위해 Matrix 클래스를 생성해주었다.

이 문제에서, 경로를 보았을때, 선형대수적 접근법과 행렬의 제곱에 대해 많이 알게되었다.

결국에 문제를 보았을떄 N*N행렬의 곱셈이 반복되고 이는 결합법칙에 의해 모든 주기의 행렬의 곱셈의 D/T의 몫만큼의 제곱이다.

행렬의 제곱을 구해보자.
이분탐색을 이용 O(log(D/T) * N**3)의 시간복잡도로 구할수있다. ABC ** 9 = ABC ** 4 * ABC ** 4 * ABC이다.
제곱을 반씩 쪼개가면 구하고 이 둘을 곱하고 나머지가 1이었다면 추가적으로 곱해주면 된다.

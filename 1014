// Online C++ compiler to run C++ program online
#include <bits/stdc++.h>
using namespace std;
int N, M, ans;
char broken_map[11][11];
int dp[11][1<<10];
vector<int> v;

int dfs_dp(int idx, int state) {
    //cout << "loop\n";
    if (idx >= N) return 0;
    if (dp[idx][state] > -1) return dp[idx][state];
    for (int state_now : v) {
        int flag = 0;
        int count_line = 0;
        for (int i = 0; i < M; i++) {
            if ((1 << i) & state_now) {
                count_line++;
                if (broken_map[idx][i] == 'x') {
                    flag = 1;
                    break;
                }
                if (idx > 0) {
                    if (i > 0 && (state & (1 << (i-1)))) {
                        flag = 1;
                        break;
                    }
                    if (i < M-1 && (state & (1 << (i+1)))) {
                        flag = 1;
                        break;
                    }
                }
            }
        }
        if (!flag) {
            dp[idx][state] = max(dp[idx][state], dfs_dp(idx+1, state_now) + count_line);
        }
    }
    return dp[idx][state];
}

void dfs(int idx, int state) {
    //cout << "idx : " << idx << ", state : " << state << "\n";
    if (idx == M) {
        v.push_back(state);
        return;
    }
    dfs(idx+1, state);
    if (idx > 0 && (1 << (idx-1)) & state) {}
    else {
        dfs(idx+1, state | (1 << idx));
    }
}

void input() {
    cin >> N >> M;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            cin >> broken_map[i][j];
        }
    }    
}

void solve() {
    int C;
    cin >> C;
    for (int i = 0; i < C; i++) {
        ans = 0;
        v.clear();
        memset(dp, -1, sizeof(dp));
        input();
        dfs(0, 0);
        /*for (auto tmp : v){
            cout << tmp << "\n";
        }*/
        cout << dfs_dp(0, 0) << "\n";
        v.clear();
    }
}

int main() {
    solve();
    return 0;
}

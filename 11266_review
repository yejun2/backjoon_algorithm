그래프가 주어졌을 때, 단절점을 모두 구해 출력하는 프로그램을 작성하시오.

단절점이란 그 정점을 제거했을 때, 그래프가 두 개 또는 그 이상으로 나누어지는 정점을 말한다. 즉, 제거했을 때 그래프의 connected component의 개수가 증가하는 정점을 말한다.

첫째 줄에 두 정수 V(1≤V≤10,000), E(1≤E≤100,000)가 주어진다. 이는 그래프가 V개의 정점과 E개의 간선으로 이루어져 있다는 의미이다. 다음 E개의 줄에는 간선에 대한 정보를 나타내는 두 정수 A, B가 주어진다. 이는 A번 정점과 B번 정점이 연결되어 있다는 의미이며, 방향은 양방향이다.

입력으로 주어지는 그래프는 연결 그래프가 아닐 수도 있다. 정점은 1부터 V까지 번호가 매겨져 있다.

첫번째로 단절점의 의미를 보자.
단절점이란 해당 정점이 삭제되고 정점과 연결된 간선들이 삭제되었을 때, 그래프의 분리집합의 갯수가 늘어나는 정점을 얘기한다.
처음 접근법은 그리디하게 접근 했다. 해당 정점을 제거한다고 생각하고, 정점에 속한 간선들을 통해 다시 find parent하는 알고리즘을 생각했었다. 하지만 정점의 개수는 10,000 간선의 개수는 100,000개이다.
O(V*(V+E)) 의 시간복잡도로는 시간제한에 통과할 수 없다.

알고리즘을 풀때, 중요한 생각은 크게 세가지인듯하다.
시간 복잡도, 그리디하게 풀때의 원리, 역으로 생각해보기.

단절점 알고리즘이 있다. 단절점 알고리즘의 중요한 논리는 2개다. 
dfs로 방문하였을때, 먼저 방문된 정점이거나 연결되어있는 정점이 지금의 정점보다 더 빠른 정점에 연결되어 있다면 그 정점은 현재 정점에 영향을 받지 않는다.
어떤 정점이 단절점인지를 파악하기 위해서는 연결되어 있는 모든 정점이 해당 정점보다 먼저 방문되어 있거나, 먼저 방문된 다른 정점에 연결되어 있는지를 파악하고, 만약 하나라도 아니라면 해당 정점은 단절점이 된다.

하지만 루트 노드를 본다면 루트보다 먼저 방문된 노드는 있을 수가 없다. 그래서 루트 노드가 dfs로 했을때, 자식을 두 번 이상 방문하면 단절점이다. 자식의 개수가 아니라 자식을 몇번 방문하는지, 방문되지 않은 정점들만 dfs를 보내기 때문에 dfs로 보내는 횟수 를 기준으로 한다.

그리고 노드는 가장 자식 노드를 타고 타고 dfs를 했을때, 가장 빠른 노드의 시간을 리턴한다. 왜냐면 연결되어 있기때문이다. 그래서 더 위의 정점을 기준으로 보았을때, 연결되어 있는 정점중 가장 빠른 곳으로 갈 수 있기 때문이다. 이 시간을 기준으로 보아야한다.

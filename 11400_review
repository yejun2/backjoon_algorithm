그래프가 주어졌을 때, 단절선을 모두 구해 출력하는 프로그램을 작성하시오.

단절선이란 그 간선을 제거했을 때, 그래프가 두 개 또는 그 이상으로 나누어지는 간선을 말한다. 즉, 제거했을 때 그래프의 connected component의 개수가 증가하는 간선을 말한다.

첫째 줄에 두 정수 V(1≤V≤100,000), E(1≤E≤1,000,000)가 주어진다. 이는 그래프가 V개의 정점과 E개의 간선으로 이루어져 있다는 의미이다. 다음 E개의 줄에는 간선에 대한 정보를 나타내는 두 정수 A, B가 주어진다. 이는 A번 정점과 B번 정점이 연결되어 있다는 의미이며, 방향은 양방향이다.

그래프는 항상 연결되어 있으며, 같은 간선이 두 번 이상 들어오는 경우는 없다. 또, A와 B가 같은 경우도 없다.

그래프의 정점은 1부터 V까지 자연수이다.

단절선의 정의를 보자면 어떤 간선이 사라졌을때, 그래프의 분리집합의 갯수가 늘어나는 간선을 얘기하는 것이다.
단절점 문제에서 우리는 dfs (dst) 알고리즘을 통해 O(V+E)로 그래프를 갱신하면서 단절점을 찾았다. 비슷한 알고리즘을 사용하여 단절선을 O(V+E)의 시간복잡도로 해결해보자.

그러면 어떤 간선이 단절선일까? 해당 간선이 A의 부모노드와 B 자식노드를 연결하는 간선이라 하자. 이 간선을 통해 연결되어 있는 하위 자식 노드의 간선을 이용하여 탐색할때, 부모노드의 도착 시간보다 더 빠르거나 같은 곳에 
도달할 수 있다면 이 간선은 단절선이 아니다. A <-> B <-> C <-> A 이런 그래프라면 A <-> B를 없애도 분리집합의 개수가 늘어나지는 않는다.
하지만 이런 알고리즘은 예외를 걸어주어야한다. A <-> B 를 보았을때, 자식 노드는 항상 부모노드의 시간을 리턴하게 된다. 이를 위해, 부모노드에 가는 간선은 제외하고 탐색하도록 한다.

방문 시간이 적혀있다면 현재 정점보다 먼저 방문된 곳이기 때문에 해당 간선은 단절선이 아니므로 최솟값만 갱신해준다.

처음에, 간선을 사용한 이후 해당 간선을 못쓰게 하는 알고리즘을 고안했었다. ***이 반례를 아직 완벽히 이해하지 못하였는데 생각해볼 부분이다***

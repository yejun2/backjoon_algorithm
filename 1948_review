<문제 내용>

월드 나라는 모든 도로가 일방통행인 도로이고, 싸이클이 없다. 그런데 어떤 무수히 많은 사람들이 월드 나라의 지도를 그리기 위해서, 어떤 시작 도시로부터 도착 도시까지 출발을 하여 가능한 모든 경로를 탐색한다고 한다.

이 지도를 그리는 사람들은 사이가 너무 좋아서 지도를 그리는 일을 다 마치고 도착 도시에서 모두 다 만나기로 하였다. 그렇다고 하였을 때 이들이 만나는 시간은 출발 도시로부터 출발한 후 최소 몇 시간 후에 만날 수 있는가? 즉, 마지막에 도착하는 사람까지 도착을 하는 시간을 의미한다.

어떤 사람은 이 시간에 만나기 위하여 1분도 쉬지 않고 달려야 한다. 이런 사람들이 지나는 도로의 수를 카운트 하여라.

출발 도시는 들어오는 도로가 0개이고, 도착 도시는 나가는 도로가 0개이다.

<초기 아이디어>
모든 사람들이 다 만나는 시간 = 가장 늦게 도착하는 사람을 뜻하는것이다.
양방향 도로가 아닌 방향성이 있는 도로이기때문에 queue를 사용하여 bfs로 탐색하며 vec값을 각 도시에 갈때 걸리는 시간의 max로 갱신하였다.

문제 1.
도로의 개수를 구하는 것.
가장 늦게 도착한 사람들이 지나온 도로의 개수를 구해야하는데 아이디어는 이러하다.
도착점에는 가장 오래 걸린 시간이 나와있다. 가장 오래 걸린 시간에서 도착점에서부터 다른 도시로 가는 시간을 뺀 값이 출발점에서 다른 도시로 가는 시간의 max와 같다면 이러한 도시에서 도착점으로 온것이
맞다고 볼 수 있다. 
이 과정을 반복하여 출발점에 도착할때 까지 반복하여준다.

문제 2.
도로의 개수의 중복을 제거하는 것.
처음에는 set을 사용하려 하였다. 이는 복잡해서 변경하였다.
도착점에서부터 반복하며 어떤 도시로 간다고 가정할 때, 이 도로는 추가되어야하지만 다른 길을 통해 중간에 만난다면 이는 중복이므로 제거해주어야한다.
그래서 어떤 도시로 이동할 때, 이 도시가 방문되었는지를 체크하는 chk (visited) 배열을 만들었고 만약 방문을 하였다면 cnt는 추가하되 q에는 추가하지 않는다.
물론, 방문후에는 chk값을 갱신해준다.
방문하였을 때에도 cnt에 추가해주는 이유는 다른 도시에서 다른 도로를 사용하여 방문한것이므로 추가해준다. 그 뒤의 도로들은 중복일 수 밖에 없으므로 q에는 추가하지 않는다.

문제 3.
메모리 초과.
처음에는 갈피를 못잡았다.
이중 벡터로 값을 저장한 것이 문제인가 싶어서 vector배열로 바꾸었지만 같은 크기의 메모리를 사용하는것이어서 의미없는 행동이었다.
search_cost 과정에서 다른 도시들에서 출발하여 한 도시를 같이 거쳐갈 때, 의미없는 탐색을 하여 q의 크기가 커지는것이 메모리 초과의 원인이었다.
우리는 각 도시의 가장 오래 걸리는 시간을 구하는 것이 목적이기에 먼저 거쳐간 사람보다 시간이 덜 걸리게 온 사람은 더 이상 탐색하지 않아도 될뿐 아니라 탐색의 의미가 없다.
그래서 vec[to]의 값보다 오래 걸려서 온 사람들만 탐색하는것으로 수정하였고, 메모리 초과문제를 해결할 수 있었다.

리뷰.
이 문제 위상정렬 문제이다. 위상정렬 알고리즘은 싸이클이 없을 때에만 사용이 가능하다. DAG에서만 사용이 가능하다는 뜻이다.
일의 순서를 따지는 것이 핵심이다. 출발점에서 시작하여 연결된 도시들로 이동하고 이 과정을 반복한다. 즉, 차수를 우선으로 탐색한다.
그리고, 도로의 개수를 구하는 과정에서 도착점에서 걸린 시간과 도로의 소요시간의 계산을 통해 역계산하는 과정을 잘 기억해두면 좋을듯하다.
